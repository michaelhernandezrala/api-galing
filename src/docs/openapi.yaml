openapi: 3.0.3
info:
  title: Salamin API
  description: ðŸªž Professional brand analysis API for developers
  version: 1.0.0

servers:
  - url: http://localhost:3605/v1
    description: Development server

paths:
  /health:
    get:
      summary: Health check endpoint
      operationId: getHealth
      x-eov-operation-handler: system.controller
      tags:
        - System
      responses:
        200:
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /apps:
    post:
      tags:
        - applications
      summary: Create new application
      description: Register a new application in the system with name, description, email and password
      x-eov-operation-handler: applications.controller
      operationId: create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Application name
                  example: 'My Brand Analyzer'
                description:
                  type: string
                  description: Brief description of the application
                  example: 'Professional brand analysis tool for developers'
                email:
                  type: string
                  description: Contact email for the application
                  example: 'contact@mybrandanalyzer.com'
                password:
                  type: string
                  description: Application password for authentication
                  example: 'secure_password_123'
              required:
                - name
                - description
                - email
                - password
      responses:
        201:
          description: Created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    default: 201
                  message:
                    type: string
                    default: Created
                  data:
                    $ref: '#/components/schemas/Application'
  /apps/{appId}:
    get:
      tags:
        - applications
      summary: Get application by ID
      description: Retrieve a specific application by its unique identifier
      x-eov-operation-handler: applications.controller
      operationId: getById
      parameters:
        - in: path
          name: appId
          description: Unique identifier of the application
          schema:
            type: string
            format: uuid
          required: true
          example: '550e8400-e29b-41d4-a716-446655440000'
      responses:
        200:
          description: Application retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    default: 200
                  message:
                    type: string
                    default: OK
                  data:
                    $ref: '#/components/schemas/Application'
        404:
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - applications
      summary: Update application
      description: Update an existing application with new information
      x-eov-operation-handler: applications.controller
      operationId: update
      parameters:
        - in: path
          name: appId
          description: Unique identifier of the application
          schema:
            type: string
            format: uuid
          required: true
          example: '550e8400-e29b-41d4-a716-446655440000'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Application name
                  example: 'My Updated Brand Analyzer'
                description:
                  type: string
                  description: Brief description of the application
                  example: 'Updated professional brand analysis tool for developers'
      responses:
        200:
          description: Application updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    default: 200
                  message:
                    type: string
                    default: OK
                  data:
                    $ref: '#/components/schemas/Application'
        400:
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - applications
      summary: Delete application
      description: Delete an existing application permanently
      x-eov-operation-handler: applications.controller
      operationId: destroy
      parameters:
        - in: path
          name: appId
          description: Unique identifier of the application
          schema:
            type: string
            format: uuid
          required: true
          example: '550e8400-e29b-41d4-a716-446655440000'
      responses:
        200:
          description: Application deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    default: 200
                  message:
                    type: string
                    default: OK
        404:
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /apps/{appId}/users:
    post:
      tags:
        - users
      summary: Create user for application
      description: Create a new user (human or server) for a specific application
      x-eov-operation-handler: users.controller
      operationId: create
      parameters:
        - in: path
          name: appId
          description: Unique identifier of the application
          schema:
            type: string
            format: uuid
          required: true
          example: '550e8400-e29b-41d4-a716-446655440000'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User's full name
                  example: 'John Doe'
                email:
                  type: string
                  description: User's email address (required for human users)
                  example: 'john@example.com'
                password:
                  type: string
                  description: User's password (required for human users)
                  example: 'secure_password_123'
                serverKey:
                  type: string
                  description: API key for server authentication (required for server users)
                  example: 'sk_1234567890abcdef'
                type:
                  type: string
                  description: Type of user account
                  example: 'human'
                  enum:
                    - human
                    - server
                enabled:
                  type: boolean
                  description: Whether the user account is active
                  example: true
                  default: true
              required:
                - type
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    default: 201
                  message:
                    type: string
                    default: Created
                  data:
                    $ref: '#/components/schemas/User'
    get:
      tags:
        - users
      summary: Get users for application
      description: Retrieve a paginated list of users for a specific application with filtering and sorting options
      x-eov-operation-handler: users.controller
      operationId: getUsers
      parameters:
        - in: path
          name: appId
          description: Unique identifier of the application
          schema:
            type: string
            format: uuid
          required: true
          example: '550e8400-e29b-41d4-a716-446655440000'
        - in: query
          name: limit
          description: Number of users to return per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          example: 10
        - in: query
          name: page
          description: Page number for pagination (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - in: query
          name: order
          description: Sort order for the results
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          example: desc
        - in: query
          name: find
          description: Search term to filter users by name or email
          schema:
            type: string
            minLength: 1
            maxLength: 100
          example: 'john'
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    default: 200
                  message:
                    type: string
                    default: OK
                  count:
                    type: number
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        400:
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /apps/{appId}/users/{userId}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Retrieve a specific user by their unique identifier within an application
      x-eov-operation-handler: users.controller
      operationId: getById
      parameters:
        - in: path
          name: appId
          description: Unique identifier of the application
          schema:
            type: string
            format: uuid
          required: true
          example: '550e8400-e29b-41d4-a716-446655440000'
        - in: path
          name: userId
          description: Unique identifier of the user
          schema:
            type: string
            format: uuid
          required: true
          example: '660e8400-e29b-41d4-a716-446655440001'
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    default: 200
                  message:
                    type: string
                    default: OK
                  data:
                    $ref: '#/components/schemas/User'
        404:
          description: User or application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        400:
          description: Invalid user ID or application ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /analyze:
    post:
      summary: Start profile analysis
      operationId: startAnalysis
      x-eov-operation-handler: analysis.controller
      tags:
        - Analysis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisRequest'
      responses:
        200:
          description: Analysis started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartAnalysisResponse'
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, degraded, down]
        version:
          type: string
          example: 1.0.0
        uptime:
          type: integer
          example: 3600
        checks:
          type: object
          properties:
            database:
              type: string
              enum: [healthy, unhealthy]
            claude:
              type: string
              enum: [healthy, unhealthy]
            externalApis:
              type: string
              enum: [healthy, unhealthy]

    Application:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the application
          example: '550e8400-e29b-41d4-a716-446655440000'
        name:
          type: string
          description: Name of the application
          example: 'My Brand Analyzer'
        description:
          type: string
          description: Brief description of what the application does
          example: 'Professional brand analysis tool for developers'
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the application was created
          example: '2024-01-15T10:30:00Z'
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the application was last updated
          example: '2024-01-15T10:30:00Z'

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '550e8400-e29b-41d4-a716-446655440000'
        applicationId:
          type: string
          format: uuid
          example: '550e8400-e29b-41d4-a716-446655440000'
        name:
          type: string
          example: 'John Doe'
          nullable: true
        email:
          type: string
          example: 'john@example.com'
          nullable: true
        type:
          type: string
          enum: [human, server]
          example: 'human'
        serverKey:
          type: string
          example: 'ed8677e0-c31c-491d-a2e7-2c6616b68f26'
          nullable: true
        enabled:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
          example: '2024-01-15T10:30:00Z'
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
          example: '2024-01-15T10:30:00Z'

    AnalysisRequest:
      type: object
      required:
        - profiles
        - target
      properties:
        profiles:
          type: object
          properties:
            github:
              type: string
              example: 'https://github.com/username'
            linkedin:
              type: string
              example: 'https://linkedin.com/in/username'
            twitter:
              type: string
              example: 'https://twitter.com/username'
        target:
          type: object
          required:
            - level
            - stack
            - platforms
          properties:
            level:
              type: string
              enum: [junior, mid, senior, staff, principal]
            stack:
              type: string
              enum: [frontend, backend, fullstack, mobile, devops, data, ml]
            platforms:
              type: array
              items:
                type: string
                enum: [github, linkedin, twitter, stackoverflow, medium]

    StartAnalysisResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        message:
          type: string
          example: 'Analysis started successfully'
        data:
          type: object
          properties:
            analysisId:
              type: string
              example: 'abc123xyz'
            status:
              type: string
              example: 'started'
            estimatedTime:
              type: integer
              example: 45

    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        message:
          type: string
          example: 'Invalid request data'
        errorCode:
          type: string
          example: 'VALIDATION_ERROR'

tags:
  - name: System
    description: System operations
  - name: Analysis
    description: Profile analysis operations
  - name: applications
    description: Application management operations
